import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
from models import ProjectSalesPredictor, MonteCarloSimulator
from PIL import Image
import time
from sklearn.model_selection import train_test_split


if 'predictions' not in st.session_state:
    st.session_state.predictions = {
        'new_project': None,
        'ongoing_project': None
    }
if 'simulation_results' not in st.session_state:
    st.session_state.simulation_results = {
        'new_project': None,
        'ongoing_project': None
    }
if 'training_results' not in st.session_state:
    st.session_state.training_results = {
        'train_metrics_df': None,
        'test_metrics_df': None,
        'test_results': None,
        'fig': None,
        'train_df': None,
        'test_df': None
    }
if 'df' not in st.session_state:
    st.session_state.df = None
if 'project_data' not in st.session_state:
    st.session_state.project_data = {
        'new_project': None,
        'ongoing_project': None
    }
if 'existing_companies' not in st.session_state:
    st.session_state.existing_companies = []


st.set_page_config(
    page_title="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
    page_icon="üè¢",
    layout="wide",
    initial_sidebar_state="expanded"
)

@st.cache_resource
def load_models():
    predictor = ProjectSalesPredictor()
    simulator = MonteCarloSimulator(predictor)
    return predictor, simulator

predictor, simulator = load_models()


st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
app_mode = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º", 
    ["–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏", "–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞", "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"])

def load_data(uploaded_file):
    try:
        df = pd.read_excel(uploaded_file)
        date_cols = ['start_date', 'end_date', 'agreement_date', 'record_date']
        for col in date_cols:
            if col in df.columns:
                df[col] = pd.to_datetime(df[col], errors='coerce')
        

        st.session_state.existing_companies = df['cons_company'].unique().tolist()
        st.session_state.existing_companies = [str(c) for c in st.session_state.existing_companies if pd.notna(c)]
        
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        return None

def get_company_input(label, default_value=""):
   
    company_options = st.session_state.existing_companies + ["–î—Ä—É–≥–∞—è –∫–æ–º–ø–∞–Ω–∏—è..."]
    selected_company = st.selectbox(label, company_options, index=len(company_options)-1 if default_value not in company_options else company_options.index(default_value))
    
    if selected_company == "–î—Ä—É–≥–∞—è –∫–æ–º–ø–∞–Ω–∏—è...":
        return st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏", value=default_value if default_value not in company_options else "")
    else:
        return selected_company


if app_mode == "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏":
    st.title("üöÄ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂")
    
    try:
        image = Image.open("image.jpeg")
        st.image(image, caption="–û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö", use_column_width=800)
    except:
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ")
    
    st.markdown("""
        <style>
        .training-instructions {
            background-color: #003d1c;
            color: #ffffff;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        .training-instructions code {
            background-color: #005a2b;
            color: #ffffff;
            padding: 2px 5px;
            border-radius: 3px;
        }
        </style>
        
        <div class="training-instructions">
        <h3>üìã –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è</h3>
        <p>Excel-—Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã (–∫–∞–∫ –º–∏–Ω–∏–º—É–º):</p>
        <ul>
            <li><code>project_name</code>, <code>start_date</code>, <code>end_date</code>, <code>agreement_date</code>, <code>record_date</code></li>
            <li><code>total_area</code>, <code>area</code> (–∏–ª–∏ <code>portion_sold</code>), <code>cons_company</code></li>
        </ul>
        <p>–î–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –ø–æ 20 —Ä–∞–∑–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–∞–º.</p>
        </div>
    """, unsafe_allow_html=True)
    
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª", type=["xlsx"], key="train_uploader")
    
    if uploaded_file is not None:
        st.session_state.df = load_data(uploaded_file)
        
        if st.session_state.df is not None:
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            
            with st.expander("üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Å–≤–æ–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö"):
                st.write("–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:")
                st.dataframe(st.session_state.df.head())
                
                st.write("–°–≤–æ–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
                st.write(f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {st.session_state.df['project_name'].nunique()}")
                st.write(f"- –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {st.session_state.df['record_date'].min().date()} –¥–æ {st.session_state.df['record_date'].max().date()}")
                st.write(f"- –î–∏–∞–ø–∞–∑–æ–Ω –ø–ª–æ—â–∞–¥–µ–π: {st.session_state.df['total_area'].min():,.0f} –¥–æ {st.session_state.df['total_area'].max():,.0f} –º¬≤")
                st.write(f"- –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏: {len(st.session_state.existing_companies)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö")
            
            if st.button("üöÄ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", type="primary"):
                with st.spinner("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"):
                    try:
                        progress_bar = st.progress(0)
                        
                        for percent_complete in range(100):
                            time.sleep(0.02)
                            progress_bar.progress(percent_complete + 1)
                        
                        projects = st.session_state.df['project_name'].unique()
                        train_projects, test_projects = train_test_split(projects, test_size=0.2, random_state=42)
                        train_df = st.session_state.df[st.session_state.df['project_name'].isin(train_projects)]
                        test_df = st.session_state.df[st.session_state.df['project_name'].isin(test_projects)]
                        
                        predictor.fit(train_df)
                        
                        train_metrics = []
                        test_metrics = []
                        
                        for project in train_projects:
                            project_data = train_df[train_df['project_name'] == project]
                            metrics = predictor.evaluate_project(project_data)
                            train_metrics.append(metrics)
                        
                        for project in test_projects:
                            project_data = test_df[test_df['project_name'] == project]
                            metrics = predictor.evaluate_project(project_data)
                            test_metrics.append(metrics)
                        
                        train_metrics_df = pd.DataFrame(train_metrics)
                        test_metrics_df = pd.DataFrame(test_metrics)
                        test_results, fig = predictor.evaluate_and_plot(test_df, num_projects=3)
                        
                        st.session_state.training_results = {
                            'train_metrics_df': train_metrics_df,
                            'test_metrics_df': test_metrics_df,
                            'test_results': test_results,
                            'fig': fig,
                            'train_df': train_df,
                            'test_df': test_df
                        }
                        
                        st.success("üéâ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
                        
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
    
    if st.session_state.training_results and st.session_state.training_results['train_metrics_df'] is not None:
        train_metrics_df = st.session_state.training_results['train_metrics_df']
        test_metrics_df = st.session_state.training_results['test_metrics_df']
        test_results = st.session_state.training_results['test_results']
        fig = st.session_state.training_results['fig']
        train_df = st.session_state.training_results['train_df']
        test_df = st.session_state.training_results['test_df']
        
        st.subheader("=== –ú–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ ===")
        
        st.markdown("#### 1. –ü—Ä–æ–≥–Ω–æ–∑ –ø–µ—Ä–∏–æ–¥–∞ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏:")
        first_sale_metrics = pd.DataFrame({
            'Dataset': ['Train', 'Test'],
            'MAE': [
                train_metrics_df['first_period_error'].abs().mean(),
                test_metrics_df['first_period_error'].abs().mean()
            ],
            'MSE': [
                (train_metrics_df['first_period_error']**2).mean(),
                (test_metrics_df['first_period_error']**2).mean()
            ]
        })
        st.dataframe(first_sale_metrics.style.format({'MAE': '{:.6f}', 'MSE': '{:.6f}'}))
        
        st.markdown("#### 2. –ü—Ä–æ–≥–Ω–æ–∑ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂–∏:")
        last_sale_metrics = pd.DataFrame({
            'Dataset': ['Train', 'Test'],
            'MAE': [
                train_metrics_df['last_period_error'].abs().mean(),
                test_metrics_df['last_period_error'].abs().mean()
            ],
            'MSE': [
                (train_metrics_df['last_period_error']**2).mean(),
                (test_metrics_df['last_period_error']**2).mean()
            ]
        })
        st.dataframe(last_sale_metrics.style.format({'MAE': '{:.6f}', 'MSE': '{:.6f}'}))
        
        st.markdown("#### 3. –ü—Ä–æ–≥–Ω–æ–∑ –æ–±—ä—ë–º–∞ –ø—Ä–æ–¥–∞–∂:")
        sales_metrics = pd.DataFrame({
            'Dataset': ['Train', 'Test'],
            'MAE (m¬≤)': [
                train_metrics_df['mae'].mean(),
                test_metrics_df['mae'].mean()
            ],
            'MAPE (%)': [
                (train_metrics_df['mae'] / train_df['total_area']).mean() * 100,
                (test_metrics_df['mae'] / test_df['total_area']).mean() * 100
            ],
            'RMSE (m¬≤)': [
                np.sqrt((train_metrics_df['mae']**2).mean()),
                np.sqrt((test_metrics_df['mae']**2).mean())
            ]
        })
        st.dataframe(sales_metrics.style.format({
            'MAE (m¬≤)': '{:.1f}',
            'MAPE (%)': '{:.1f}',
            'RMSE (m¬≤)': '{:.1f}'
        }))
        
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–∏")
        tab1, tab2 = st.tabs(["üìà –ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "üìä –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫"])
        
        with tab1:
            st.markdown("### –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö")
            st.pyplot(fig)
            
        with tab2:
            st.markdown("### –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ—Ü–µ–Ω–∫–∏")
            st.dataframe(
                test_results.style.format({
                    'mae': '{:.1f}',
                    'r2_score': '{:.2f}',
                    'first_period_error': '{:.3f}',
                    'last_period_error': '{:.3f}'
                }),
                use_container_width=True
            )


elif app_mode == "–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞":
    st.title("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        project_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", "–Ø—Å—Å–∞—É–∏")
        start_date = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", datetime(2022, 11, 30))
        end_date = st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", datetime(2024, 12, 30))
        agreement_date = st.date_input("–î–∞—Ç–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è", datetime(2023, 2, 2))
        total_area = st.number_input("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–º¬≤)", min_value=100, value=10795)
        duration = st.number_input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–µ—Å—è—Ü—ã)", min_value=1, value=25)
        company = get_company_input("–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è", "–¢–û–û BAZIS-A Corp.")
    
    with col2:
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–µ–Ω—ã")
        min_price = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤", min_value=100, value=450000)
        max_price = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤", min_value=100, value=560000)
        
        st.subheader("–ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ —Å–∏–º—É–ª—è—Ü–∏—è")
        cost_official = st.number_input("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞", min_value=0, value=6548335303)
        unfin_cost = st.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∫–∏", min_value=0, value=389462312)
    
    if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
        project_data = {
            "project_name": project_name,
            "start_date": start_date.strftime('%Y-%m-%d'),
            "end_date": end_date.strftime('%Y-%m-%d'),
            "agreement_date": agreement_date.strftime('%Y-%m-%d'),
            "total_area": total_area,
            "duration": duration,
            "cons_company": company
        }
        
        st.session_state.project_data['new_project'] = project_data
        
        with st.spinner("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞..."):
            try:
                predictions = predictor.predict(project_data, min_price, max_price)
                st.session_state.predictions['new_project'] = predictions
                
                simulation_results = simulator.run_simulation(
                    project_data=project_data,
                    min_price=min_price,
                    max_price=max_price,
                    cost_official=cost_official,
                    unfin_cost=unfin_cost,
                    num_simulations=10000
                )
                st.session_state.simulation_results['new_project'] = simulation_results
                
                st.success("–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!")
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}")
    
    if st.session_state.predictions['new_project'] and st.session_state.project_data['new_project']:
        predictions = st.session_state.predictions['new_project']
        simulation_results = st.session_state.simulation_results['new_project']
        project_data = st.session_state.project_data['new_project']
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("–ü–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –ø—Ä–æ–¥–∞–∂", f"{predictions['first_sale_period']:.1%}")
            st.metric("–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –ø—Ä–æ–¥–∞–∂", f"{predictions['last_sale_period']:.1%}")
            st.metric("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ (–¥–Ω–∏)", f"{predictions['sales_duration_days']:.0f}")
        
        with col2:
            st.metric("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –≤—ã—Ä—É—á–∫–∞", f"${predictions['total_predicted_revenue']:,.0f}")
            st.metric("–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –º–µ—Å—è—Ü", f"{predictions['avg_monthly_sales']:,.1f} –º¬≤")
            st.metric("–ú–µ—Å—è—Ü–µ–≤ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏", len(predictions['monthly_predictions']))
        
        st.subheader("–ü–æ–º–µ—Å—è—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂")
        st.dataframe(predictions['monthly_predictions'])
        
        st.subheader("–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–æ–¥–∞–∂")
        forecast_fig = predictor.plot_sales_forecast(predictions, project_data)
        st.pyplot(forecast_fig)
        
        st.subheader("–°–∏–º—É–ª—è—Ü–∏—è —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        price_fig = simulator.plot_price_diapason(predictions['monthly_predictions'], project_name)
        st.pyplot(price_fig)
        
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ —Å–∏–º—É–ª—è—Ü–∏–∏")
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ—É–¥–∞—á–∏", f"{simulation_results['failure_rate']:.1%}")
            st.metric("–°—Ä–µ–¥–Ω–∏–π –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫", f"${simulation_results['mean_cash_flow']:,.0f}")
            st.metric("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", f"${simulation_results['std_dev_cash_flow']:,.0f}")
        
        with col2:
            st.metric("–õ—É—á—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π", f"${simulation_results['max_cash_flow']:,.0f}")
            st.metric("–•—É–¥—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π", f"${simulation_results['min_cash_flow']:,.0f}")
            st.metric("–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏", simulation_results['median_months_to_breakeven'])
        
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏")
        sim_fig = simulator._plot_monte_carlo_results(
            simulation_results['simulation_results'],
            simulation_results['mean_cash_flow'],
            simulation_results['std_dev_cash_flow'],
            simulation_results['failure_rate'],
            project_name,
            cost_official,
            unfin_cost
        )
        st.pyplot(sim_fig)


elif app_mode == "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞":
    st.title("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        project_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", "4YOU Business - 1", key="ongoing_name")
        start_date = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", datetime(2019, 9, 10), key="ongoing_start")
        end_date = st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", datetime(2022, 1, 10), key="ongoing_end")
        agreement_date = st.date_input("–î–∞—Ç–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è", datetime(2019, 10, 10), key="ongoing_agree")
        total_area = st.number_input("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–º¬≤)", min_value=100, value=19824, key="ongoing_area")
        duration = st.number_input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–µ—Å—è—Ü—ã)", min_value=1, value=28, key="ongoing_duration")
        company = get_company_input("–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è", "–¢–û–û –ú–µ—Ä–µ–∫–µ –°–µ—Ä–≤–∏—Å –ù–°")
    
    with col2:
        st.subheader("–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂")
        completed_months = st.number_input("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤", min_value=1, max_value=120, value=8)
        actual_sales = st.text_input("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", "1360.85007, 2517.27002, 1200.700005, 734.4100037, 998.2700043, 946.3999977, 274.9700012, 1344.429989")
        period_percentages = st.text_input("–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", "0.037514654, 0.060961313, 0.103165299, 0.148886284, 0.168815944, 0.203985932, 0.297772567, 0.385697538")
        
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–µ–Ω—ã")
        min_price = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤", min_value=100, value=501000, key="ongoing_min")
        max_price = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤", min_value=100, value=580000, key="ongoing_max")
        
        st.subheader("–ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ —Å–∏–º—É–ª—è—Ü–∏—è")
        cost_official = st.number_input("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞", min_value=0, value=12457003488, key="ongoing_cost")
        unfin_cost = st.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∫–∏", min_value=0, value=47120000, key="ongoing_unfin")
    
    if st.button("–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
        project_data = {
            "project_name": project_name,
            "start_date": start_date.strftime('%Y-%m-%d'),
            "end_date": end_date.strftime('%Y-%m-%d'),
            "agreement_date": agreement_date.strftime('%Y-%m-%d'),
            "total_area": total_area,
            "duration": duration,
            "cons_company": company
        }
        
        st.session_state.project_data['ongoing_project'] = project_data
        
        with st.spinner("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞..."):
            try:
                actual_sales_list = [float(x.strip()) for x in actual_sales.split(",")] if actual_sales else []
                period_pct_list = [float(x.strip()) for x in period_percentages.split(",")] if period_percentages else []
                
                predictions = predictor.predict_ongoing_project(
                    project_data=project_data,
                    completed_months=completed_months,
                    actual_sales=actual_sales_list,
                    period_percentages=period_pct_list
                )
                
                if 'price_per_sqm' not in predictions['monthly_predictions']:
                    predictions['monthly_predictions']['price_per_sqm'] = np.linspace(
                        min_price, max_price, len(predictions['monthly_predictions'])
                    )
                
                st.session_state.predictions['ongoing_project'] = predictions
                
                simulation_results = simulator.run_simulation(
                    project_data=project_data,
                    min_price=min_price,
                    max_price=max_price,
                    cost_official=cost_official,
                    unfin_cost=unfin_cost,
                    num_simulations=10000
                )
                st.session_state.simulation_results['ongoing_project'] = simulation_results
                
                st.success("–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}")
    
    if st.session_state.predictions['ongoing_project'] and st.session_state.project_data['ongoing_project']:
        predictions = st.session_state.predictions['ongoing_project']
        simulation_results = st.session_state.simulation_results['ongoing_project']
        project_data = st.session_state.project_data['ongoing_project']
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("–ü—Ä–æ–¥–∞–Ω–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç", f"{predictions['total_sold_so_far']:,.0f} –º¬≤")
            st.metric("–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å", f"{predictions['remaining_area']:,.0f} –º¬≤")
            st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è", f"{predictions['completion_percentage']:.1%}")
        
        with col2:
            st.metric("–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –ø—Ä–æ–¥–∞–∂", f"{predictions['last_sale_period']:.1%}")
            st.metric("–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂", f"{predictions['sales_duration_days']:.0f}")
            st.metric("–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—è—Ü–µ–≤ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏", len(predictions['monthly_predictions']))
        
        st.subheader("–ü–æ–º–µ—Å—è—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂")
        st.dataframe(predictions['monthly_predictions'])
        
        st.subheader("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞")
        ongoing_fig = predictor.plot_ongoing_project_results(predictions, project_data)
        st.pyplot(ongoing_fig)
        
        st.subheader("–°–∏–º—É–ª—è—Ü–∏—è —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        price_fig = simulator.plot_ongoing_project_diapason(
            predictions, 
            project_data,
            min_price,
            max_price
        )
        st.pyplot(price_fig)
        
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ —Å–∏–º—É–ª—è—Ü–∏–∏")
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ—É–¥–∞—á–∏", f"{simulation_results['failure_rate']:.1%}")
            st.metric("–°—Ä–µ–¥–Ω–∏–π –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫", f"${simulation_results['mean_cash_flow']:,.0f}")
            st.metric("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", f"${simulation_results['std_dev_cash_flow']:,.0f}")
        
        with col2:
            st.metric("–õ—É—á—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π", f"${simulation_results['max_cash_flow']:,.0f}")
            st.metric("–•—É–¥—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π", f"${simulation_results['min_cash_flow']:,.0f}")
            st.metric("–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏", simulation_results['median_months_to_breakeven'])
        
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏")
        sim_fig = simulator._plot_monte_carlo_results(
            simulation_results['simulation_results'],
            simulation_results['mean_cash_flow'],
            simulation_results['std_dev_cash_flow'],
            simulation_results['failure_rate'],
            project_name,
            cost_official,
            unfin_cost
        )
        st.pyplot(sim_fig)